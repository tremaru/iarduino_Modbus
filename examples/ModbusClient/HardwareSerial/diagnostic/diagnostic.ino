// ПРИМЕР ВЫПОЛНЕНИЯ ФУНКЦИЙ ДИАГНОСТИКИ:                                          //
                                                                                   //
#include <iarduino_Modbus.h>                                                       //   Подключаем библиотеку для работы по протоколу Modbus.
ModbusClient modbus(Serial1, 2);                                                   //   Создаём объект для работы по протоколу Modbus указывая объект шины UART-RS485 для протокола и вывод DE конвертера UART-RS485.
                                                                                   //
void setup(){                                                                      //
     Serial.begin(9600); while(!Serial);                                           //   Инициируем передачу данных в монитор последовательного порта, указав его скорость.
     Serial1.begin(9600); while(!Serial1);                                         //   Инициируем работу с шиной UATR-RS485 указав её скорость.
     modbus.begin();                                                               //   Инициируем работу по протоколу Modbus.
//   modbus.setTimeout(10);                                                        //   Указываем максимальное время ожидания ответа по протоколу Modbus.
//   modbus.setDelay(4);                                                           //   Указываем минимальный интервал между отправляемыми сообщениями по протоколу Modbus.
//   modbus.setTypeMB( MODBUS_RTU );                                               //   Указываем тип протокола Modbus: MODBUS_RTU (по умолчанию), или MODBUS_ASCII.
                                                                                   //
     int32_t result;                                                               //
                                                                                   //
//   Для модуля с адресом 9 выполняем функцию диагностики N 0 (возврат данных):    //
     result = modbus.diagnostic(9, 0, 0x1234);                                     //   Выполняем диагностику указав адрес модуля на шине, номер функции диагностики и данные.
     if( result<0       ){ Serial.println("Провал 0 функции диагностики"); }else   //   Модуль вернул ошибку. Тип (код) ошибки можно получить функцией modbus.lastError().
     if( result!=0x1234 ){ Serial.println("Провал 0 функции диагностики"); }else   //   Модуль вернул данные отличные от тех которые мы ему отправили, это провал 0 функции диагностики.
     if( result==0x1234 ){ Serial.println("Успех  0 функции диагностики"); }       //   Модуль вернул те же данные которые мы ему отправили, это успешное выполнение 0 функции диагностики.
                                                                                   //
//   Для модуля с адресом 9 выполняем функцию диагностики N 1 (сброс и проверка):  //
     result = modbus.diagnostic(9, 1, 0x0000);                                     //   Выполняем диагностику указав адрес модуля на шине, номер функции диагностики и данные.
     if( result<0       ){ Serial.println("Провал 1 функции диагностики"); }       //   Модуль вернул ошибку. Тип (код) ошибки можно получить функцией modbus.lastError().
     else                { Serial.println("Успех  1 функции диагностики"); }       //   Модуль выполнил проверку своих систем, результат этой проверки можно прочитать из регистра диагностики.
                                                                                   //
//   Для модуля с адресом 9 выполняем функцию диагностики N 2 (чтение регистра):   //
     result = modbus.diagnostic(9, 2);                                             //   Выполняем диагностику указав адрес модуля на шине и номер функции диагностики.
     if( result<0       ){ Serial.println("Провал 2 функции диагностики"); }       //   Модуль вернул ошибку. Тип (код) ошибки можно получить функцией modbus.lastError().
     else                { Serial.println("Успех  2 функции диагностики"); }       //   Модуль вернул содержимое регистра диагностики.
     if( result==0      ){ Serial.println("Ошибки не выявлены"); }                 //   Все биты регистра диагностики сброшены в 0, значит модуль не выявил ошибки в процессе выполнения 1 функции диагностики.
     else                { Serial.println("Модуль обнаружил у себя ошибки"); }     //   У регистра диагностики есть установленные биты, значит модуль обнаружил ошибки в процессе выполнения 1 функции диагностики.
}                                                                                  //
                                                                                   //
//   Метод modbus.diagnostic() позволяет выполнять и другие функций диагностики.   //
                                                                                   //
void loop(){                                                                       //
}                                                                                  //